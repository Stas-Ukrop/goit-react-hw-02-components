{"version":3,"sources":["components/Notification/Notification.js","components/Statistics/Statistics.js","components/Buttons/createButtons/createButtons.js","components/Buttons/Buttons.js","components/Sections/Sections.js","components/ToDoList/RenderList/RenderList.js","components/ToDoList/MainList/MainList.js","components/ToDoList/ContactForm/ContactForm.js","components/ToDoList/Filter/Filter.js","App.js","index.js"],"names":["Notification","message","Statistics","good","neutral","bad","title","useState","total","setTotal","positive","setPositive","useEffect","Math","round","createButtons","options","setOptions","masButtons","map","el","index","type","onClick","toString","Buttons","Sections","children","propTypes","PropTypes","any","RenderList","list","remoteContact","fullList","id","name","number","MainList","ContactForm","addContacts","inputText","document","querySelectorAll","nameContact","contact","setContact","onChange","event","target","value","uuidv4","i","length","alert","Filter","filterFunc","e","App","setGood","setNeutral","setBad","listContactTotal","setListContactTotal","filterListContactTotal","setFilterListContactTotal","massItem","localStorage","getItem","parseItem","JSON","parse","ListContact","setItem","stringify","prev","toLowerCase","includes","filter","todo","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f22ae258.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <h2>{message}</h2>;\r\n};\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Notification from \"../Notification\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, title }) => {\r\n  const [total, setTotal] = useState(0);\r\n  const [positive, setPositive] = useState(0);\r\n  useEffect(() => {\r\n    setTotal(good + neutral + bad);\r\n    if (good === 0) return;\r\n    if (neutral === 0 && bad === 0) return setPositive(100);\r\n    if (neutral !== 0 || bad !== 0)\r\n      return setPositive(Math.round((good / total) * 100));\r\n  }, [good, neutral, bad, total]);\r\n  return (\r\n    <>\r\n      {good || bad || neutral ? (\r\n        <div>\r\n          <h1>{title}</h1>\r\n          <span>Good:{good}</span>\r\n          <br />\r\n          <span>Neutral:{neutral}</span>\r\n          <br />\r\n          <span>Bad:{bad}</span>\r\n          <br />\r\n          <span>Total:{total}</span>\r\n          <br />\r\n          <span>Positive feedback:{positive}</span>\r\n        </div>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  title: PropTypes.string,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst createButtons = ({ options, setOptions }) => {\r\n  let masButtons = options.map((el, index) => {\r\n    return (\r\n      <button key={index.toString()} type=\"button\" onClick={setOptions[index]}>\r\n        {el}\r\n      </button>\r\n    );\r\n  });\r\n  return <>{masButtons}</>;\r\n};\r\nexport default createButtons;\r\ncreateButtons.propTypes = {\r\n  options: PropTypes.array,\r\n  setOptions: PropTypes.array,\r\n};\r\n","import React from \"react\";\r\nimport \"./Buttons.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport CreateButtons from \"./createButtons\";\r\n\r\nconst Buttons = ({ options, setOptions }) => {\r\n  return (\r\n    <>\r\n      <CreateButtons options={options} setOptions={setOptions} />\r\n    </>\r\n  );\r\n};\r\nexport default Buttons;\r\nButtons.propTypes = {\r\n  options: PropTypes.array,\r\n  setOptions: PropTypes.array,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Sections = ({ children }) => {\r\n  return <>{children}</>;\r\n};\r\nexport default Sections;\r\nSections.propTypes = {\r\n  children: PropTypes.any,\r\n};\r\n","import React from \"react\";\r\nimport \"./RenderList.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RenderList = ({ list, remoteContact }) => {\r\n  let fullList = list.map(({ id, name, number }) => {\r\n    return (\r\n      <li key={id}>\r\n        <p>{name}:</p>\r\n        <span>{number}</span>\r\n        <button type=\"button\" onClick={() => remoteContact(id)}>\r\n          Удалить\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <ul>{fullList}</ul>\r\n    </div>\r\n  );\r\n};\r\nexport default RenderList;\r\n\r\nRenderList.propTypes = {\r\n  list: PropTypes.exact({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  }),\r\n  remoteContact: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport RenderList from \"../RenderList\";\r\nconst MainList = ({ list, remoteContact }) => {\r\n  return (\r\n    <>\r\n      <RenderList list={list} remoteContact={remoteContact} />\r\n    </>\r\n  );\r\n};\r\nexport default MainList;\r\n","import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactForm = ({ addContacts }) => {\r\n  const inputText = document.querySelectorAll(\"input[type='text']\");\r\n  const [contact, setContact] = useState({\r\n    id: \"\",\r\n    nameContact: \"\",\r\n    number: \"\",\r\n  });\r\n  const addContact = () => {\r\n    if (contact.nameContact !== \"\" && contact.number !== \"\") {\r\n      addContacts((contact.id = uuidv4()), contact.nameContact, contact.number);\r\n      setContact({ id: \"\", nameContact: \"\", number: \"\" });\r\n      for (let i = 0; i < inputText.length; i++) {\r\n        inputText[i].value = \"\";\r\n      }\r\n    } else {\r\n      alert(\"Пожалуйста введите все данные в поля формы\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <label>Input name</label>\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        name=\"nameContact\"\r\n        onChange={(event) => {\r\n          setContact((contact) => ({\r\n            ...contact,\r\n            [event.target.name]: event.target.value,\r\n          }));\r\n        }}\r\n      ></input>\r\n      <br />\r\n      <label>Input number</label>\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        name=\"number\"\r\n        onChange={(event) => {\r\n          setContact((contact) => ({\r\n            ...contact,\r\n            [event.target.name]: event.target.value,\r\n          }));\r\n        }}\r\n      ></input>\r\n      <br />\r\n      <button type=\"button\" onClick={addContact}>\r\n        Добавить контакт\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\nContactForm.propTypes = {\r\n  addContacts: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  }),\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ filterFunc }) => {\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          filterFunc(e.target.value);\r\n        }}\r\n      ></input>\r\n    </>\r\n  );\r\n};\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  filterFunc: PropTypes.func,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Statistics from \"./components/Statistics\";\r\nimport FeedbackOptions from \"./components/Buttons\";\r\nimport Sections from \"./components/Sections\";\r\nimport ListContact from \"./components/ToDoList/MainList/List.json\";\r\nimport ToDoList from \"./components/ToDoList/MainList/MainList\";\r\nimport ContactForm from \"./components/ToDoList/ContactForm\";\r\nimport Filters from \"./components/ToDoList/Filter\";\r\n\r\nconst App = () => {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const [listContactTotal, setListContactTotal] = useState([]);\r\n  const [filterListContactTotal, setFilterListContactTotal] = useState(\r\n    listContactTotal\r\n  );\r\n  useEffect(() => {\r\n    const massItem = localStorage.getItem(\"massItem\");\r\n    const parseItem = JSON.parse(massItem);\r\n    \r\n    if (parseItem) {\r\n      setListContactTotal(parseItem);\r\n    } else {\r\n      setListContactTotal(ListContact);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    setFilterListContactTotal(listContactTotal);\r\n    localStorage.setItem(\"massItem\", JSON.stringify(listContactTotal));\r\n  }, [listContactTotal]);\r\n  const goodVoise = () => {\r\n    setGood((good) => good + 1);\r\n  };\r\n  const neuiralVoise = () => {\r\n    setNeutral((neutral) => neutral + 1);\r\n  };\r\n  const badVoise = () => {\r\n    setBad((bad) => bad + 1);\r\n  };\r\n  const addContacts = (id, name, number) => {\r\n    setListContactTotal((prev) => {\r\n      let newArray = prev.map((el) => el.name.toLowerCase());\r\n\r\n      if (newArray.includes(name.toLowerCase())) {\r\n        alert(\"такое имя уже есть, придумайте другое\");\r\n        return prev;\r\n      } else {\r\n        return [...prev, { id, name, number }];\r\n      }\r\n    });\r\n  };\r\n\r\n  const contactsFilter = (filter) => {\r\n    setFilterListContactTotal(listContactTotal);\r\n    setFilterListContactTotal((prev) => {\r\n      return prev.filter((contact) => {\r\n        return contact.name.toLowerCase().includes(filter.toLowerCase());\r\n      });\r\n    });\r\n  };\r\n  const remoteContact = (id) => {\r\n    setListContactTotal((prev) => prev.filter((todo) => todo.id !== id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Please leave feedback</h1>\r\n\r\n      <Sections>\r\n        <FeedbackOptions\r\n          options={[\"good\", \"neutral\", \"bad\"]}\r\n          setOptions={[goodVoise, neuiralVoise, badVoise]}\r\n        />\r\n        <Statistics\r\n          title=\"Statistics\"\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n        />\r\n      </Sections>\r\n\r\n      <Sections>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm addContacts={addContacts} />\r\n\r\n        <h2>Contacts</h2>\r\n        <Filters filterFunc={contactsFilter} />\r\n        <ToDoList list={filterListContactTotal} remoteContact={remoteContact} />\r\n      </Sections>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}